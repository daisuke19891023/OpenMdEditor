/**
 * Type definitions related to AI interactions, chat messages, and suggestions.
 */
import type { Message as VercelChatMessage } from 'ai'; // Import base Message type from Vercel AI SDK

// Define the possible roles in a chat conversation, aligning with Vercel AI SDK
export type ChatMessageRole = VercelChatMessage['role']; // 'user' | 'assistant' | 'system' | 'function' | 'data' | 'tool'

// Base structure for chat messages, extending Vercel AI SDK's Message
// We might not need this if we directly use VercelChatMessage and add optional fields
// export interface BaseChatMessage extends VercelChatMessage {
//   // Add custom fields if necessary, but prefer using Vercel's structure
// }

// User message type (primarily for type checking, structure matches VercelChatMessage)
export interface UserChatMessage extends VercelChatMessage {
  role: 'user';
  // Note: We pass 'hasSelection' via the 'body' option in useChat, not directly in the message object
}

// Define possible types for AI suggestions (used for UI logic)
export type AISuggestionType = 'create' | 'edit_selection' | 'edit_full';

// Assistant message type, extending VercelChatMessage with our custom fields
export interface AssistantChatMessage extends VercelChatMessage {
  role: 'assistant';
  // Additional fields specific to our application's handling of AI suggestions
  type?: AISuggestionType; // The type of suggestion (create, edit, etc.)
  originalSelection?: string; // The original text if it was a selection edit
  markdown?: string; // Explicitly store the markdown content if needed separately from `content`
  // Although usually `content` itself holds the markdown response.
  // This might be redundant if `content` always contains the final markdown.
}

// Union type for messages used within our application logic or stores, potentially extending Vercel's type
// It's often simpler to just use VercelChatMessage[] and handle optional fields.
export type ChatMessageForStore = UserChatMessage | AssistantChatMessage;

// Type for the AI suggestion object passed to the preview dialog
export interface AISuggestion {
  role: 'assistant'; // Fixed role
  content: string; // Can be used for a title or brief description in the dialog
  markdown: string; // The actual Markdown content generated by the AI
  type?: AISuggestionType; // Type of suggestion (create, edit, etc.)
}

// Define the possible modes for the AI chat panel
export type AIChatMode = 'create' | 'edit';
